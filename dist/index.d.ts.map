{"mappings":"AAAA;gBAOgB,SAAS,EAAE,WAAW,EAAE,OAAO,CAAC,EAAE,GAAG;IAiBjD,IAAI,IAAI,IAAI;IAIZ,UAAU,IAAI,WAAW;IAIzB,YAAY,IAAI,WAAW;IAI3B,eAAe,IAAI,OAAO;IAI1B,SAAS,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI;IAI/B,WAAW,CAAC,KAAK,EAAE,MAAM,GAAG,IAAI;IAIhC,IAAI,IAAI,IAAI;IAIZ,IAAI,IAAI,IAAI;CAIf;ACxDD;IACI,cAAc,CAAC,EAAE,MAAM,CAAC;IACxB,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,cAAc,CAAC,EAAE,OAAO,CAAC;IACzB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,aAAa,CAAC,EAAE,MAAM,CAAC;IACvB,OAAO,CAAC,EAAE,MAAM,CAAC;CACpB;ACND;gBAOgB,SAAS,EAAE,WAAW,EAAE,OAAO,CAAC,EAAE,OAAO;IASrD,IAAI,IAAI,IAAI;IAuBZ,UAAU,IAAI,WAAW;IAIzB,QAAQ,IAAI,KAAK;IAIjB,YAAY,IAAI,WAAW;IAI3B,eAAe,IAAI,OAAO;IAI1B,gBAAgB,IAAI,IAAI;IAIxB,IAAI,IAAI,IAAI;IAIZ,IAAI,IAAI,IAAI;CAGf;ACrED;IACE,QAAQ,IAAA;IACR,UAAU,IAAA;CACX;AEID;gBAOgB,SAAS,CAAC,EAAE,WAAW,EAAE,OAAO,CAAC,EAAE,OAAO,EAAE,SAAS,GAAE,SAA8B;IAyBjG,IAAI,IAAI,IAAI;IAUZ,UAAU,IAAI,WAAW;IAIzB,YAAY,IAAI,WAAW;IAI3B,YAAY,IAAI,SAAS;IAIzB,QAAQ,IAAI,KAAK;IAIjB,eAAe,CAAC,QAAQ,EAAE,MAAM,GAAI,IAAI;IAcxC,IAAI,IAAI,IAAI;IAIZ,IAAI,IAAI,IAAI;IAIZ,gBAAgB;IAIhB,aAAa,CAAC,UAAU,EAAE,MAAM,GAAG,IAAI;CAK1C;AC5FD;;IA6BE,IAAI,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,OAAO,CAAC,EAAE,OAAO,GAAG,IAAI;IAmCpD,UAAU,IAAI,WAAW;IAIzB,gBAAgB,IAAI,WAAW;IAI/B,YAAY,IAAI,SAAS;IAKzB,WAAW;CA+BZ","sources":["src/src/scrollbar/thumb.ts","src/src/interfaces.ts","src/src/scrollbar/track.ts","src/src/scrollbar/direction.ts","src/src/events/index.ts","src/src/scrollbar/index.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,"import Scrollbar from \"./scrollbar/index\";\nimport Direction from \"./scrollbar/direction\";\nimport { Options } from \"./interfaces\";\n\nclass EnchantScrollbar {\n  /* \n          scrollableDiv is a div that we create and copy the content of the element to it.\n          We set the element's overflow to hidden and the scrollableDiv's overflow to auto.\n          This way, we can hide the scrollbar of the element and use the scrollbar of the scrollableDiv.\n      */\n  private element: HTMLElement;\n  private scrollableDiv: HTMLElement;\n  private scrollbar: Scrollbar;\n  private options: any;\n\n  /* \n          @param element: HTMLElement\n          @param options: any\n      */\n  constructor() {\n    // default options\n    this.options = {\n      scrollbarWidth: 8,\n      borderRadius: 8,\n      zIndex: 999,\n      theme: \"light\",\n      minimizeOnBlur: true,\n      autoHide: true,\n      autoHideDelay: 1000,\n      padding: 0,\n    };\n  }\n\n  init(element?: HTMLElement, options?: Options): void {\n    this.element = element;\n\n    if (element) {\n      this.element.style.position = \"relative\";\n      this.element.style.overflow = \"hidden\";\n\n      // We create a div inside the element so it can be scrolled only, not the element itself and the scrollbar\n      this.scrollableDiv = document.createElement(\"div\");\n      this.scrollableDiv.classList.add(\"enchant-scrollable-content\");\n      this.scrollableDiv.style.position = \"absolute\";\n      this.scrollableDiv.style.top = \"0\";\n      this.scrollableDiv.style.left = \"0\";\n      this.scrollableDiv.style.width = \"100%\";\n      this.scrollableDiv.style.height = \"100%\";\n      this.scrollableDiv.style.overflow = \"auto\";\n\n      this.scrollableDiv.innerHTML = this.element.innerHTML;\n      this.element.innerHTML = \"\";\n      this.element.appendChild(this.scrollableDiv);\n\n      // We create an instance of the scrollbar and append it to the element\n      this.scrollbar = new Scrollbar(this.scrollableDiv, this.options, Direction.VERTICAL);\n      this.element.appendChild(this.scrollbar.getElement());\n    } else {\n      this.element = document.body;\n\n      this.scrollbar = new Scrollbar(this.element, this.options, Direction.VERTICAL);\n      this.element.appendChild(this.scrollbar.getElement());\n    }\n\n\n    this.injectStyle();\n  }\n\n  getElement(): HTMLElement {\n    return this.element;\n  }\n\n  getScrollableDiv(): HTMLElement {\n    return this.scrollableDiv;\n  }\n\n  getScrollbar(): Scrollbar {\n    return this.scrollbar;\n  }\n\n  // TODO: add browser compatibility\n  injectStyle() {\n    const head = document.head || document.getElementsByTagName(\"head\")[0];\n    const style = document.createElement(\"style\");\n\n    style.appendChild(\n      document.createTextNode(`\n          .enchant-scrollable-content::-webkit-scrollbar {\n              display: none;\n          }\n          .enchant-scrollable-content {\n              scrollbar-width: none;\n            }\n          `)\n    );\n\n    // if the target element is the body\n    if (this.element === document.body) {\n      style.appendChild(\n        document.createTextNode(`\n                ::-webkit-scrollbar {\n                    display: none;\n                }\n                body {\n                    scrollbar-width: none;\n                }\n            `)\n      );\n    }\n\n    head.appendChild(style);\n  }\n}\n\nexport { EnchantScrollbar };\n"],"names":[],"version":3,"file":"index.d.ts.map"}